// # When an operand is of array type.


// ****************************************************************************************


#include <iostream>  
using namespace std;  
 int main()  
{  
  int arr[]={10,20,30,40,50};  
  std::cout << "Size of the array 'arr' is : "<<sizeof(arr) << std::endl;  
  return 0;  
}  



// **********************************************************************************************



In the above program, we have declared an array of integer type which contains five elements. We have evaluated the size of the array by using sizeof() operator. According to our calculation, the size of the array should be 20 bytes as int data type occupies 4 bytes, and array contains 5 elements, so total memory space occupied by this array is 5*4 = 20 bytes. The same result has been shown by the sizeof() operator as we can observe in the following output.

Output

sizeof() operator in C++



// ****************************************************************************************


// ****************Next Code Will Be Generated By Me Vishuu005********************************************

// # Let's consider another scenario of an array.



#include <iostream>  
using namespace std;  
void fun(int arr[])  
{  
    std::cout << "Size of array is : " <<sizeof(arr)<< std::endl;  
}  
int main()  
{  
  int arr[]={10,20,30,40,50};  
  fun(arr);  
  return 0;  
}  





In the above program, we have tried to print the size of the array using the function. In this case, we have created an array of type integer, and we pass the 'arr' to the function fun(). The fun() would return the size of the integer pointer, i.e., int*, and the size of the int* is 8 bytes in the 64-bit operating system.

Output